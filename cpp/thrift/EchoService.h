/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EchoService_H
#define EchoService_H

#include <thrift/TDispatchProcessor.h>
#include "echo_types.h"

namespace bfd { namespace harpc { namespace demo {

class EchoServiceIf {
 public:
  virtual ~EchoServiceIf() {}
  virtual void echo(std::string& _return, const std::string& msg) = 0;
};

class EchoServiceIfFactory {
 public:
  typedef EchoServiceIf Handler;

  virtual ~EchoServiceIfFactory() {}

  virtual EchoServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(EchoServiceIf* /* handler */) = 0;
};

class EchoServiceIfSingletonFactory : virtual public EchoServiceIfFactory {
 public:
  EchoServiceIfSingletonFactory(const boost::shared_ptr<EchoServiceIf>& iface) : iface_(iface) {}
  virtual ~EchoServiceIfSingletonFactory() {}

  virtual EchoServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(EchoServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<EchoServiceIf> iface_;
};

class EchoServiceNull : virtual public EchoServiceIf {
 public:
  virtual ~EchoServiceNull() {}
  void echo(std::string& /* _return */, const std::string& /* msg */) {
    return;
  }
};

typedef struct _EchoService_echo_args__isset {
  _EchoService_echo_args__isset() : msg(false) {}
  bool msg :1;
} _EchoService_echo_args__isset;

class EchoService_echo_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  EchoService_echo_args(const EchoService_echo_args&);
  EchoService_echo_args& operator=(const EchoService_echo_args&);
  EchoService_echo_args() : msg() {
  }

  virtual ~EchoService_echo_args() throw();
  std::string msg;

  _EchoService_echo_args__isset __isset;

  void __set_msg(const std::string& val);

  bool operator == (const EchoService_echo_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const EchoService_echo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EchoService_echo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const EchoService_echo_args& obj);

};


class EchoService_echo_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~EchoService_echo_pargs() throw();
  const std::string* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const EchoService_echo_pargs& obj);

};

typedef struct _EchoService_echo_result__isset {
  _EchoService_echo_result__isset() : success(false) {}
  bool success :1;
} _EchoService_echo_result__isset;

class EchoService_echo_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  EchoService_echo_result(const EchoService_echo_result&);
  EchoService_echo_result& operator=(const EchoService_echo_result&);
  EchoService_echo_result() : success() {
  }

  virtual ~EchoService_echo_result() throw();
  std::string success;

  _EchoService_echo_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const EchoService_echo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EchoService_echo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EchoService_echo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const EchoService_echo_result& obj);

};

typedef struct _EchoService_echo_presult__isset {
  _EchoService_echo_presult__isset() : success(false) {}
  bool success :1;
} _EchoService_echo_presult__isset;

class EchoService_echo_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~EchoService_echo_presult() throw();
  std::string* success;

  _EchoService_echo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const EchoService_echo_presult& obj);

};

class EchoServiceClient : virtual public EchoServiceIf {
 public:
  EchoServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  EchoServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void echo(std::string& _return, const std::string& msg);
  void send_echo(const std::string& msg);
  void recv_echo(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class EchoServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<EchoServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (EchoServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_echo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  EchoServiceProcessor(boost::shared_ptr<EchoServiceIf> iface) :
    iface_(iface) {
    processMap_["echo"] = &EchoServiceProcessor::process_echo;
  }

  virtual ~EchoServiceProcessor() {}
};

class EchoServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  EchoServiceProcessorFactory(const ::boost::shared_ptr< EchoServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< EchoServiceIfFactory > handlerFactory_;
};

class EchoServiceMultiface : virtual public EchoServiceIf {
 public:
  EchoServiceMultiface(std::vector<boost::shared_ptr<EchoServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~EchoServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<EchoServiceIf> > ifaces_;
  EchoServiceMultiface() {}
  void add(boost::shared_ptr<EchoServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void echo(std::string& _return, const std::string& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->echo(_return, msg);
    }
    ifaces_[i]->echo(_return, msg);
    return;
  }

};

}}} // namespace

#endif
